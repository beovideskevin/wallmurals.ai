<!DOCTYPE html>
<html lang="">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">

  <!-- SEO -->
  <title><%= title %></title>
  <meta name="keywords" content="<%= keywords %>" />
  <meta name="description" content="<%= description %>" />
  <meta name="author" content="<%= author %>" />
  <link rel="canonical" href="https://www.wallmurals.ai/">

  <!-- Favicon -->
  <link rel="icon" type="image/png" href="/icons/icon-72x72.png">

  <style>
    html {
      line-height: 1.5;
      -webkit-text-size-adjust: 100%;
      -moz-tab-size: 4;
      -o-tab-size: 4;
      tab-size: 4;
      font-family: Figtree, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", Segoe UI Symbol, "Noto Color Emoji";
      font-feature-settings: normal;
      font-variation-settings: normal;
      background-color: #000;
    }

    html,
    body {
      position: relative;
      margin: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
      background: transparent;
    }

    #splash {
      position: absolute;
      display: flex;
      align-items: center;
      justify-content: center;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100%;
      height: 100%;
      margin: auto;
      background-color: #000000;
      z-index: 20;
      /*
      background-image: url('/icons/icon-72x72-round.png');
      background-repeat: no-repeat;
      background-position: center;
      */
    }

    @keyframes spin {
      0% {
        transform-origin: center;
        transform: rotate(0deg);
      }

      100% {
        transform-origin: center;
        transform: rotate(360deg);
      }
    }

    .loader {
      width: 128px;
      height: 128px;
      border-radius: 50%;
      animation: spin 1s infinite linear;
      border-top: 2px solid #ffffff;
    }

    #photoBtnsWrapper, #arBtnsWrapper {
      display: flex;
      align-items: center;
      justify-content: space-around;
      position: absolute;
      z-index: 1000;
      bottom: 60px;
      right: 0px;
      height: 40px;
      width: 100%;
    }

    #photoBtnsWrapper {
      display: none;
    }

    #photoBtnsWrapper a {
      color: #fff;
    }

    #arBtnsWrapper a {
      color: #fff;
    }

    #muteBtn {
      display: none;
    }

    @media (orientation: landscape) {
      #photoBtnsWrapper, #arBtnsWrapper {
          height: 100%;
          width: 40px;
          bottom: 0px;
          right: 60px;
          flex-direction: column;
        }
    }

    #photoWrapper {
      display: none;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #000000;
      z-index: 20;
    }

    #photoWrapper canvas {
      max-width: 100%;
      max-height: 100%;
    }

  </style>
</head>

<body>
  <div id="splash">
    <div class="loader">
    </div>
  </div>

  <div id="arBtnsWrapper">
    <a id="soundBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-2"><path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/><path d="M16 9a5 5 0 0 1 0 6"/><path d="M19.364 18.364a9 9 0 0 0 0-12.728"/></svg>
    </a>
    <a id="muteBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-x"><path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/><line x1="22" x2="16" y1="9" y2="15"/><line x1="16" x2="22" y1="9" y2="15"/></svg>
    </a>
    <a id="photoBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-camera"><path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"/><circle cx="12" cy="13" r="3"/></svg>
    </a>
    <a id="switchBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-switch-camera"><path d="M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5"/><path d="M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5"/><circle cx="12" cy="12" r="3"/><path d="m18 22-3-3 3-3"/><path d="m6 2 3 3-3 3"/></svg>
    </a>
  </div>

  <div id="photoWrapper">
  </div>

  <div id="photoBtnsWrapper">
    <a id="backBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"/></svg>
    </a>
    <a id="shareBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-share-2"><circle cx="18" cy="5" r="3"/><circle cx="6" cy="12" r="3"/><circle cx="18" cy="19" r="3"/><line x1="8.59" x2="15.42" y1="13.51" y2="17.49"/><line x1="15.41" x2="8.59" y1="6.51" y2="10.49"/></svg>
    </a>
    <a id="downloadBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-download"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>
    </a>
  </div>

  <script src="/ar/ar-image-three.prod.js"></script>
  <script type="module">
    import { createChromaMaterial } from '/ar/chroma-video.js';

    window.facingUser = false;
    var mindarThree = null;
    let targetFound = -1;
    let artwork = {
      marker: '/markers/<%= artwork.marker %>',
      video: '/videos/<%= artwork.video %>',
      poster: '/posters/<%= artwork.poster %>',
      width: <%= artwork.width %>,
      height: <%= artwork.height %>,
      chroma: '<%= artwork.chroma %>',
      element: null
    };
    let photoFileName = "";

    const loadVideo = (path, poster) => {
      return new Promise((resolve, reject) => {
        const video = document.createElement("video");
        video.addEventListener('loadedmetadata', () => {
          video.setAttribute('loop', '');
          video.setAttribute('playsinline', '');
          video.setAttribute('poster', poster);
          console.log("Finished loading: " + path);
          resolve(video);
        });
        video.src = path;
        video.preload = "metadata";
      });
    }

    const setup = () => {
      mindarThree = new window.MINDAR.IMAGE.MindARThree({
        container: document.body,
        imageTargetSrc: artwork.marker,
        uiLoading: "no",
        uiScanning: "yes",
        uiError: "yes",
        filterMinCF: 0.0001, //  default: 1   working for me before: 0.0001,
        filterBeta: 0.001, //   default: 10000  kind of working for me before: 0.001
        missTolerance: 0, // default 0, working for me before: 3
        warmupTolerance: 10, // default 0, working for me before: 3
      });

      let anchor = null;
      loadVideo(artwork.video, artwork.poster).then((element) => {
        artwork.element = element;
        let texture = new window.MINDAR.IMAGE.THREE.VideoTexture(artwork.element);
        let geometry = new window.MINDAR.IMAGE.THREE.PlaneGeometry(1, artwork.height / artwork.width);
        let material = artwork.chroma == null || artwork.chroma == 'null'
          ? new window.MINDAR.IMAGE.THREE.MeshBasicMaterial({ map: texture })
          : createChromaMaterial(texture, artwork.chroma);
        let plane = new window.MINDAR.IMAGE.THREE.Mesh(geometry, material);
        anchor = mindarThree.addAnchor(0);
        anchor.group.add(plane);
        anchor.onTargetFound = () => {
          artwork.element.currentTime = 0;
          artwork.element.muted = true;
          artwork.element.play();
        }
        anchor.onTargetLost = () => {
          artwork.element.pause();
          artwork.element.muted = true;
          mindarThree.ui.showScanning();
        }
        artwork.element.addEventListener("ended", event => {
          artwork.element.currentTime = 0;
        });
      });
    }

    const start = async () => {
      if (!mindarThree) {
        setup();
      }
      const { renderer, scene, camera } = mindarThree;
      await mindarThree.start();
      renderer.setAnimationLoop(() => {
        renderer.render(scene, camera);
      });
      document.getElementById("splash").style.display = "none";
      document.getElementById("arBtnsWrapper").style.display = "flex";
    }

    const restart = async () => {
      if (!mindarThree) {
        return;
      }
      document.getElementById("splash").style.display = "flex";
      document.getElementById("arBtnsWrapper").style.display = "none";
      await mindarThree.stop();
      mindarThree.renderer.setAnimationLoop(null);
      start();
    }

    document.addEventListener('DOMContentLoaded', () => {
      window.location.hash = "";
      start();
    });

    /**
     * Add event so the AR is restarted when the phone changes orientation
     */
    screen.orientation.addEventListener("change", (event) => {
      restart();
    });

    /**
     * If the page is showed reload it
     */
    window.addEventListener('pageshow', (event) => {
      if (event.persisted) {
          // I need to do this because of the back-forward cache, the videos are not loading when the back button is pressed in the browser
          // window.location.reload();
          // But maybe this will work also
          restart();
      }
    });

    document.getElementById("soundBtn").addEventListener('click', () => {
      artwork.element.muted = false;
      document.getElementById("soundBtn").style.display = "none";
      document.getElementById("muteBtn").style.display = "block";
    });

    document.getElementById("muteBtn").addEventListener('click', () => {
      artwork.element.muted = true;
      document.getElementById("soundBtn").style.display = "block";
      document.getElementById("muteBtn").style.display = "none";
    });

    document.getElementById("photoBtn").addEventListener('click', () => {
      if (!mindarThree) {
        return;
      }

      const {video, renderer, scene, camera} = mindarThree;
      const renderCanvas = renderer.domElement;

      // output canvas
      const canvas = document.createElement('canvas');
      canvas.setAttribute("id", "photoCanvas");
      const context = canvas.getContext('2d');
      canvas.width = renderCanvas.width;
      canvas.height = renderCanvas.height;

      const sx = (video.clientWidth - renderCanvas.clientWidth) / 2 * video.videoWidth / video.clientWidth;
      const sy = (video.clientHeight - renderCanvas.clientHeight) / 2 * video.videoHeight / video.clientHeight;
      const sw = video.videoWidth - sx * 2; 
      const sh = video.videoHeight - sy * 2; 

      context.drawImage(video, sx, sy, sw, sh, 0, 0, canvas.width, canvas.height);
      
      renderer.preserveDrawingBuffer = true;
      renderer.render(scene, camera); // empty if not run
      context.drawImage(renderCanvas, 0, 0, canvas.width, canvas.height);
      renderer.preserveDrawingBuffer = false;

      const photoWrapper = document.getElementById("photoWrapper");
      photoWrapper.appendChild(canvas);
      photoWrapper.style.display = "block";
      document.getElementById("arBtnsWrapper").style.display = "none";
      document.getElementById("photoBtnsWrapper").style.display = "flex";
      photoFileName = Date.now();
      window.location.hash = photoFileName;
    });

    document.getElementById("switchBtn").addEventListener('click', () => {
      window.facingUser = !window.facingUser;
      restart();
    });

    document.getElementById("downloadBtn").addEventListener('click', () => {
      const canvas = document.getElementById("photoCanvas");
      if (!canvas) {
        return;
      }
      const data = canvas.toDataURL("image/jpeg", 1.0)
      const link = document.createElement('a');
      link.download = photoFileName + '.jpg';
      link.href = data;
      link.click();
    });

    document.getElementById("shareBtn").addEventListener('click', () => {
      const canvas = document.getElementById("photoCanvas");
      if (!canvas) {
        return;
      }
      canvas.toBlob((blob) => {
        const file = new File([blob], "photo.png", {type: "image/png"});
        const files = [file];
	      if (navigator.canShare && navigator.canShare({files})) {
          navigator.share({
            files: files,
            title: 'Wall Mural AI',
          });
	      }
      });
    });

    document.getElementById("backBtn").addEventListener('click', () => {
      history.back();
    });

    window.onhashchange = function() {
      if (window.location.hash != "") {
        return;
      }
      document.getElementById("arBtnsWrapper").style.display = "flex";
      document.getElementById("photoBtnsWrapper").style.display = "none";
      const photoWrapper = document.getElementById("photoWrapper");
      photoWrapper.style.display = "none";
      photoWrapper.innerHTML = "";
    }

  </script>
</body>
</html>
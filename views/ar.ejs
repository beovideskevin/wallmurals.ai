<!DOCTYPE html>
<html lang="es-ES">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">

  <!-- SEO -->
  <title><%= title %></title>
  <meta name="keywords" content="<%= keywords %>" />
  <meta name="description" content="<%= description %>" />
  <meta name="author" content="<%= author %>" />
  <link rel="canonical" href="https://www.wallmurals.ai/">

  <meta property="og:type" content="website" />
  <meta property="og:title" content="<%= title %>" />
  <meta property="og:description" content="<%= description %>" />
  <meta property="og:site_name" content="<%= site %>" />
  <meta property="og:locale" content="es_ES" />
  <meta property="og:url" content="https://www.wallmurals.ai" />
  <meta property="og:image" content="/posters/<%= artwork.poster %>"/>
  <!-- <meta property="og:image:type" content="image/png" />
  <meta property="og:image:width" content="480" />
  <meta property="og:image:height" content="640" /> -->
  <meta property="article:publisher" content="<%= author %>" />
  <meta property="article:author" content="<%= author %>" />
  
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:site" content="<%= site %>" />
  <meta name="twitter:url" content="https://www.wallmurals.ai" />
  <meta name="twitter:title" content="<%= title %>" />
  <meta name="twitter:description" content="<%= description %>" />
  <meta name="twitter:image" content="/posters/<%= artwork.poster %>" />
  
  <meta itemprop="name" content="<%= site %>" />
  <meta itemprop="description" content="<%= description %>" />
  <meta itemprop="image" content="/posters/<%= artwork.poster %>" />

  <!-- Favicon -->
  <link rel="icon" type="image/png" href="/assets/icons/icon-72x72.png">

  <style>
    html {
      line-height: 1.5;
      -webkit-text-size-adjust: 100%;
      -moz-tab-size: 4;
      -o-tab-size: 4;
      tab-size: 4;
      font-family: Figtree, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", Segoe UI Symbol, "Noto Color Emoji";
      font-feature-settings: normal;
      font-variation-settings: normal;
      background-color: #000;
    }

    html,
    body {
      position: relative;
      margin: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
      background: transparent;
    }

    #splash {
      position: absolute;
      display: flex;
      align-items: center;
      justify-content: center;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100%;
      height: 100%;
      margin: auto;
      background-color: #000000;
      z-index: 20;
      /*
      background-image: url('/icons/icon-72x72-round.png');
      background-repeat: no-repeat;
      background-position: center;
      */
    }

    @keyframes spin {
      0% {
        transform-origin: center;
        transform: rotate(0deg);
      }

      100% {
        transform-origin: center;
        transform: rotate(360deg);
      }
    }

    .loader {
      width: 128px;
      height: 128px;
      border-radius: 50%;
      animation: spin 1s infinite linear;
      border-top: 2px solid #ffffff;
    }

    #photoWrapper {
      display: none;
      align-items: center;
      justify-content: center;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #000000;
      z-index: 10;
    }

    #photoWrapper canvas {
      max-width: 100%;
      max-height: 100%;
    }

    #videoWrapper {
      display: none;
      align-items: center;
      justify-content: center;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #000000;
      z-index: 10;
    }

    #videoWrapper video {
      max-width: 100%;
      max-height: 100%;
    }

    #arBtnsWrapper, #photoBtnsWrapper, #videoBtnsWrapper {
      display: none;
      align-items: center;
      justify-content: space-around;
      position: absolute;
      z-index: 15;
      bottom: 60px;
      right: 0px;
      height: 40px;
      width: 100%;
    }

    #playVideoBtnWrapper {
      position: absolute;
      display: none;
      align-items: center;
      justify-content: center;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100%;
      height: 100%;
      margin: auto;
      background: transparent;
      z-index: 15;
    }

    #arBtnsWrapper a, #photoBtnsWrapper a, #videoBtnsWrapper a, #playVideoBtnWrapper a {
      color: #fff;
    }

    #soundBtn {
      display: none;
    }

    @media (orientation: landscape) {
      #arBtnsWrapper, #photoBtnsWrapper, #videoBtnsWrapper {
          height: 100%;
          width: 40px;
          bottom: 0px;
          right: 60px;
          flex-direction: column;
        }
    }

    .mindar-ui-compatibility {
      z-index: 100 !important;
      background-color: #000 !important;
    }

  </style>
</head>

<body>
  <div id="splash">
    <div class="loader">
    </div>
  </div>

  <div id="arBtnsWrapper">
    <a id="soundBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-2"><path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/><path d="M16 9a5 5 0 0 1 0 6"/><path d="M19.364 18.364a9 9 0 0 0 0-12.728"/></svg>
    </a>
    <a id="muteBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-x"><path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/><line x1="22" x2="16" y1="9" y2="15"/><line x1="16" x2="22" y1="9" y2="15"/></svg>
    </a>
    <a id="photoBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-camera"><path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"/><circle cx="12" cy="13" r="3"/></svg>
    </a>
    <a id="recVideoBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-video"><path d="m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5"/><rect x="2" y="6" width="14" height="12" rx="2"/></svg>
    </a>
    <a id="switchBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-switch-camera"><path d="M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5"/><path d="M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5"/><circle cx="12" cy="12" r="3"/><path d="m18 22-3-3 3-3"/><path d="m6 2 3 3-3 3"/></svg>
    </a>
  </div>

  <div id="photoWrapper">
  </div>

  <div id="photoBtnsWrapper">
    <a id="backPhotoBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"/></svg>
    </a>
    <a id="sharePhotoBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-share-2"><circle cx="18" cy="5" r="3"/><circle cx="6" cy="12" r="3"/><circle cx="18" cy="19" r="3"/><line x1="8.59" x2="15.42" y1="13.51" y2="17.49"/><line x1="15.41" x2="8.59" y1="6.51" y2="10.49"/></svg>
    </a>
    <a id="downloadPhotoBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-download"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>
    </a>
  </div>

  <div id="videoWrapper">
  </div>

  <div id="playVideoBtnWrapper">
    <a id="playVideoBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-circle-play"><circle cx="12" cy="12" r="10"/><polygon points="10 8 16 12 10 16 10 8"/></svg>
    </a>
  </div>

  <div id="videoBtnsWrapper">
    <a id="backVideoBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"/></svg>
    </a>
    <a id="shareVideoBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-share-2"><circle cx="18" cy="5" r="3"/><circle cx="6" cy="12" r="3"/><circle cx="18" cy="19" r="3"/><line x1="8.59" x2="15.42" y1="13.51" y2="17.49"/><line x1="15.41" x2="8.59" y1="6.51" y2="10.49"/></svg>
    </a>
    <a id="downloadVideoBtn" href="javascript:;">
      <svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6363636363636365" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-download"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>
    </a>
  </div>

  <canvas id="record" style="display: none"></canvas>

  <script src="/ar/ar-image-three.prod.js"></script>
  <script type="module">
    import { createChromaMaterial } from '/ar/chroma-video.js';

    // Declarations
    window.cameraFacing = false;
    var mindarThree = null;
    var artwork = {
      marker: '/markers/<%= artwork.marker %>',
      video: '/videos/<%= artwork.video %>',
      poster: '/posters/<%= artwork.poster %>',
      width: <%= artwork.width %>,
      height: <%= artwork.height %>,
      chroma: '<%= artwork.chroma %>',
      tagline: '<%= artwork.tagline %>',
      element: null
    };
    const shutter = new Audio('/sound/shutter.mp3');
    var hashLocation = "";
    var recording = false;
    var recStartId = null;
    var recFrameId = null;
    let mediaRecorder;
    let recordedChunks = [];
    let frameRate = 30; // FPS
    let interval = 1000 / frameRate;

    /*
      Loads the video
    */
    const loadVideo = (path, poster) => {
      return new Promise((resolve, reject) => {
        const video = document.createElement("video");
        video.addEventListener('loadedmetadata', () => {
          video.setAttribute('loop', 'true');
          video.setAttribute('playsinline', 'true');
          video.setAttribute('muted', 'true');
          video.setAttribute('poster', poster);
          console.log("Finished loading: " + path);
          resolve(video);
        });
        video.src = path;
        video.preload = "metadata";
      });
    }

    /*
      Starts the AR system
    */
    const start = async () => {
      // Set up the AR system
      mindarThree = new window.MINDAR.IMAGE.MindARThree({
        container: document.body,
        imageTargetSrc: artwork.marker,
        uiLoading: "no",
        uiScanning: "yes",
        uiError: "yes",
        filterMinCF: 0.0001, //  default: 1   working for me before: 0.0001,
        filterBeta: 0.001, //   default: 10000  kind of working for me before: 0.001
        missTolerance: 0, // default 0, working for me before: 3
        warmupTolerance: 10, // default 0, working for me before: 3
      });
      artwork.element = await loadVideo(artwork.video, artwork.poster);
      let texture = new window.MINDAR.IMAGE.THREE.VideoTexture(artwork.element);
      let geometry = new window.MINDAR.IMAGE.THREE.PlaneGeometry(1, artwork.height / artwork.width);
      let material = artwork.chroma == null || artwork.chroma == 'null'
        ? new window.MINDAR.IMAGE.THREE.MeshBasicMaterial({ map: texture })
        : createChromaMaterial(texture, artwork.chroma);
      let plane = new window.MINDAR.IMAGE.THREE.Mesh(geometry, material);
      let anchor = mindarThree.addAnchor(0);
      anchor.group.add(plane);

      // Set the events
      anchor.onTargetFound = () => {
        artwork.element.currentTime = 0;
        artwork.element.loop = true;
        artwork.element.playsinline = true;
        artwork.element.play();
      }
      anchor.onTargetLost = () => {
        artwork.element.pause();
        mindarThree.ui.showScanning();
      }
      
      // Start the AR system
      const { renderer, scene, camera } = mindarThree;
      await mindarThree.start();
      renderer.setAnimationLoop(() => {
        renderer.render(scene, camera);
      });
      document.getElementById("splash").style.display = "none";
      document.getElementById("arBtnsWrapper").style.display = "flex";
    }

    /*
      Very destructive restart, needed because of a bug with the AR system, when you switched cameras 
      the video didn't go away
    */
    const restart = async () => {
      if (!mindarThree) {
        return;
      }
      document.getElementById("splash").style.display = "flex";
      await mindarThree.stop();

      for (let i = 0; i < mindarThree.anchors.length; i++) {
        mindarThree.anchors[i].group.visible=false; // Do I really need this?
        mindarThree.anchors[i].group.updateWorldMatrix(null);
      }

      await mindarThree.start();
      document.getElementById("splash").style.display = "none";
    }

    /*
      This is where everything starts
    */
    document.addEventListener('DOMContentLoaded', () => {
      window.location.hash = "";
      window.cameraFacing = localStorage.getItem('cameraFacing');
      start();
    });

    /**
     * Add event so the AR is restarted when the phone changes orientation
     */
    screen.orientation.addEventListener("change", (event) => {
      if (!mindarThree) {
        return;
      }
      // window.location.reload();
      restart();
    });

    /**
      If the page is showed reload it,
      I need to do this because of the back-forward cache, the videos are not loading when the back button is pressed in the browser (comment from filosofiantigua.es)
    */
    window.addEventListener('pageshow', (event) => {
      if (event.persisted) {
          window.location.reload();
      }
    });

    /*
      For iphone user we need a click in order to unmute the videos
    */
    document.getElementById("soundBtn").addEventListener('click', () => {
      artwork.element.muted = false;
      document.getElementById("soundBtn").style.display = "none";
      document.getElementById("muteBtn").style.display = "block";
    });

    document.getElementById("muteBtn").addEventListener('click', () => {
      artwork.element.muted = true;
      document.getElementById("soundBtn").style.display = "block";
      document.getElementById("muteBtn").style.display = "none";
    });
    
    /*
      Saves the image or video and shows the photo or video wrapper
    */
    document.getElementById("recVideoBtn").addEventListener('click', () => {
      if (!recording) {
        recording = true;
        recordedChunks = [];
        document.getElementById("recVideoBtn").style.color = "#f00";
        const canvas = document.getElementById('record');
        recFrameId = setInterval(() => {
          copyRenderedCanvas(canvas);
        }, interval);
        const stream = canvas.captureStream(frameRate);
        mediaRecorder = new MediaRecorder(stream, { mimeType: 'video/webm' });
        mediaRecorder.ondataavailable = event => {
          if (event.data.size > 0) {
            recordedChunks.push(event.data);
          }
        };
        mediaRecorder.onstop = () => {
          const videoBlob = new Blob(recordedChunks, { type: 'video/webm' });
          const url = URL.createObjectURL(videoBlob);
          const recVideo = document.createElement("video");
          recVideo.addEventListener('loadedmetadata', () => {
            recVideo.setAttribute('id', 'videoCanvas');
            recVideo.setAttribute('loop', '');
            recVideo.setAttribute('playsinline', '');
            recVideo.setAttribute('muted', '');

            const photoWrapper = document.getElementById("videoWrapper");
            photoWrapper.appendChild(recVideo);
            photoWrapper.style.display = "flex";
            document.getElementById("arBtnsWrapper").style.display = "none";
            document.getElementById("videoBtnsWrapper").style.display = "flex";
            document.getElementById("playVideoBtnWrapper").style.display = "flex";
            hashLocation = Date.now();
            window.location.hash = hashLocation;
          });
          recVideo.src = url;
          recVideo.preload = "metadata";
        };
        mediaRecorder.start();
      }
      else {
        recording = false;
        document.getElementById("recVideoBtn").style.color = "#fff";
        clearInterval(recFrameId);
        recFrameId = null;
        mediaRecorder.stop();
      }
    });

    document.getElementById("photoBtn").addEventListener('click', () => {
      const canvas = document.createElement('canvas');
      canvas.setAttribute("id", "photoCanvas");
      copyRenderedCanvas(canvas);
      const photoWrapper = document.getElementById("photoWrapper");
      photoWrapper.appendChild(canvas);
      photoWrapper.style.display = "flex";
      document.getElementById("arBtnsWrapper").style.display = "none";
      document.getElementById("photoBtnsWrapper").style.display = "flex";
      hashLocation = Date.now();
      window.location.hash = hashLocation;
      shutter.play();
    });

    function copyRenderedCanvas(canvas) {
      const {video, renderer, scene, camera} = mindarThree;
      const renderCanvas = renderer.domElement;

      const context = canvas.getContext('2d');
      canvas.width = renderCanvas.width;
      canvas.height = renderCanvas.height;

      const sx = (video.clientWidth - renderCanvas.clientWidth) / 2 * video.videoWidth / video.clientWidth;
      const sy = (video.clientHeight - renderCanvas.clientHeight) / 2 * video.videoHeight / video.clientHeight;
      const sw = video.videoWidth - sx * 2; 
      const sh = video.videoHeight - sy * 2; 
      context.drawImage(video, sx, sy, sw, sh, 0, 0, canvas.width, canvas.height);
      
      renderer.preserveDrawingBuffer = true;
      renderer.render(scene, camera); // empty if not run
      context.drawImage(renderCanvas, 0, 0, canvas.width, canvas.height);
      renderer.preserveDrawingBuffer = false;
    }

    /* 
      Switches the camera from environment to user. 
      I had to badly patch the file ar-image-three.prof.js to make this work.
    */ 
    document.getElementById("switchBtn").addEventListener('click', () => {
      // If the value is null, the result should be user since the default is environment
      window.cameraFacing = window.cameraFacing == "user" ? "environment" : "user";
      localStorage.setItem('cameraFacing', window.cameraFacing);
      restart();
    });

    /* 
      Downloads the image
    */ 
    document.getElementById("downloadPhotoBtn").addEventListener('click', () => {
      const resource = document.getElementById("photoCanvas");
      if (!resource) {
        return;
      }
    
      let mime = {type: "image/jpeg"};
      let ext = '.jpeg';
      const data = resource.toDataURL(mime, 1.0)
      const link = document.createElement('a');
      const filename = artwork.tagline + "-" + hashLocation + ext;
      const sanitized = filename.replace(/[/\\?%*:|"<>]/g, '-');
      link.download = sanitized;
      link.href = data;
      link.click();
    });

    /*
      Shares the photo
    */
    document.getElementById("sharePhotoBtn").addEventListener('click', () => {
      const resource = document.getElementById("photoCanvas");
      if (!resource) {
        return;
      }
      
      resource.toBlob((blob) => {
        let mime = {type: "image/jpeg"};
        let ext = '.jpeg';
        const filename = artwork.tagline + "-" + hashLocation + ext;
        const sanitized = filename.replace(/[/\\?%*:|"<>]/g, '-');
        const file = new File([blob], sanitized, mime);
        const files = [file];
	      if (navigator.canShare && navigator.canShare({files})) {
          try {
            navigator.share({
              files: files,
              title: artwork.tagline,
              text: artwork.tagline,
              url: "https://wallmurals.ai",
            });
          } 
          catch (error) {
            console.error('Error sharing photo:', error);
          }
	      }
      })
    });

    /*
      The back button just goes back in the history, the onhashchange event ius the one that modifies the UI
    */
    document.getElementById("backPhotoBtn").addEventListener('click', () => {
      history.back();
    });

    /*
      Play the video
    */
    document.getElementById("playVideoBtn").addEventListener('click', () => {
      document.getElementById("playVideoBtnWrapper").style.display = "none";
      document.getElementById("videoCanvas").play();
    });

    /* 
      Downloads the video
    */ 
    document.getElementById("downloadVideoBtn").addEventListener('click', () => {
      const resource = document.getElementById("videoCanvas");
      if (!resource) {
        return;
      }
    
      let mime = { mimeType: 'video/webm' };
      let ext = ".webm";
      const data = resource.src;
      const link = document.createElement('a');
      const filename = artwork.tagline + "-" + hashLocation + ext;
      const sanitized = filename.replace(/[/\\?%*:|"<>]/g, '-');
      link.download = sanitized;
      link.href = data;
      link.click();
    });

    /*
      Shares the video
    */
    document.getElementById("shareVideoBtn").addEventListener('click', () => {
      const resource = document.getElementById("videoCanvas");
      if (!resource) {
        return;
      }

      let mime = { mimeType: 'video/webm' };
      let ext = ".webm";
      fetch(resource.src).then((r) => {
        let blob = r.blob()
        const filename = artwork.tagline + "-" + hashLocation + ext;
        const sanitized = filename.replace(/[/\\?%*:|"<>]/g, '-');
        const file = new File([blob], sanitized, mime);
        const files = [file];
        if (navigator.canShare && navigator.canShare({files})) {
          try {
            navigator.share({
              files: files,
              title: artwork.tagline,
              text: artwork.tagline,
              url: "https://wallmurals.ai",
            });
          } 
          catch (error) {
            console.error('Error sharing video:', error);
          }
        }
      })
      .catch(function (error) {
        console.log("Error fetching video before sharing:", error);
      });
    });

    /*
      The back button just goes back in the history, the onhashchange event ius the one that modifies the UI
    */
    document.getElementById("backVideoBtn").addEventListener('click', () => {
      history.back();
    });

    /*
      If you go back on the history we need to hide the photo wrapper and the buttons and show the AR system
    */
    window.onhashchange = function() {
      if (window.location.hash != "") {
        return;
      }
      document.getElementById("arBtnsWrapper").style.display = "flex";
      document.getElementById("photoBtnsWrapper").style.display = "none";
      document.getElementById("videoBtnsWrapper").style.display = "none";
      document.getElementById("playVideoBtnWrapper").style.display = "none";
      const photoWrapper = document.getElementById("photoWrapper");
      photoWrapper.style.display = "none";
      photoWrapper.innerHTML = "";
      const videoWrapper = document.getElementById("videoWrapper");
      videoWrapper.style.display = "none";
      videoWrapper.innerHTML = "";
    }

  </script>

  <!-- Google tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-9EH5BJHSZ5"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-9EH5BJHSZ5');
  </script>
</body>
</html>